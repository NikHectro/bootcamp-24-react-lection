{"version":3,"file":"static/js/821.d2d4ec0f.chunk.js","mappings":"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","sources":["components/Posts/PostsErorr/PostsErorr.jsx","../node_modules/date-fns/esm/formatDistanceToNow/index.js","components/Posts/PostsItem/PostsItem.jsx","helpers/cut-string.js","webpack://bootcamp-24-react/./src/components/Skeleton/Skeleton.module.css?e666","components/Skeleton/Skeleton.jsx","components/Posts/PostsLoader/PostsLoader.jsx","components/Posts/PostsNotFound/PostsNotFound.jsx","components/Posts/PostsSearch/PostsSearch.jsx","constants/fetch-status.js","pages/PostsListPage/PostsListPage.jsx"],"sourcesContent":["import image from './713761_big_8857bc5285.jpeg';\n\nexport const PostsError = () => {\n  return (\n    <div className=\"d-flex flex-column justify-content-center align-items-center\">\n      <img src={image} alt=\"not found\" style={{ width: 300 }} />\n      <p className=\"my-3\">Все идет по плану. Потерь нет!</p>\n    </div>\n  );\n};\n","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport default function formatDistanceToNow(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), options);\n}","import formatDistanceToNow from 'date-fns/formatDistanceToNow';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { useAuth } from '../../../context/auth.context';\nimport { cutString } from '../../../helpers/cut-string';\n\nexport const PostsItem = ({ post }) => {\n  const { isAuth } = useAuth();\n  const location = useLocation();\n\n  return (\n    <div className=\"col-12 col-xl-6 col-xxl-4 mb-4\">\n      <div className=\"card\">\n        <img\n          height=\"250px\"\n          alt={post.title}\n          src={post.preview_image}\n          className=\"card-img-top\"\n          style={{ objectFit: 'cover' }}\n        />\n\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{post.title}</h5>\n\n          <p className=\"card-text\">{cutString(post.content, 60)}</p>\n\n          <ul className=\"list-group list-group-flush mb-4\">\n            <li className=\"list-group-item\">Views: {post.views}</li>\n            <li className=\"list-group-item\">Created: {formatDistanceToNow(new Date(post.created_at))}</li>\n          </ul>\n\n          {isAuth && (\n            <div className=\"d-flex\">\n              <button type=\"button\" className=\"btn btn-link\">\n                Delete post\n              </button>\n\n              <Link to={`/posts/${post.id}`} state={{ from: location }} className=\"btn btn-link ms-3\">\n                Read post\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const cutString = (string, maxLength) => {\n  return string.length > maxLength ? string.slice(0, maxLength) + '...' : string;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"skeleton\":\"Skeleton_skeleton__xUXxh\"};","import classNames from 'classnames';\n\nimport styles from './Skeleton.module.css';\n\nexport const Skeleton = ({ className, ...props }) => {\n  return <div className={classNames(styles.skeleton, className)} {...props} />;\n};\n","import { Skeleton } from '../../Skeleton';\n\nexport const PostsLoader = ({ amount = 6 }) => {\n  return (\n    <div className=\"container-fluid g-0 pb-5 mb-5\">\n      <div className=\"row\">\n        {[...Array(amount)].map((_, i) => (\n          <div key={i} className=\"col-12 col-xl-6 col-xxl-4 mb-4\">\n            <div className=\"card\">\n              <Skeleton style={{ height: '250px' }} />\n\n              <div className=\"card-body\">\n                <h5 className=\"card-title mb-4\">\n                  <Skeleton style={{ height: '12px' }} />\n                </h5>\n\n                <div className=\"card-text\">\n                  <Skeleton className=\"my-2\" />\n                  <Skeleton className=\"w-50\" />\n                </div>\n\n                <ul className=\"list-group list-group-flush my-4\">\n                  <li className=\"list-group-item d-flex align-items-center\">\n                    Views: <Skeleton className=\"w-25 ms-2\" />\n                  </li>\n                  <li className=\"list-group-item d-flex align-items-center\">\n                    Created: <Skeleton className=\"w-25 ms-2\" />\n                  </li>\n                </ul>\n\n                <div className=\"d-flex mt-3\">\n                  <div className=\"btn btn-link disabled\">Delete post</div>\n                  <div className=\"btn btn-link disabled ms-3\">Read post</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import image from './713761_big_8857bc5285.jpeg';\n\nexport const PostsNotFound = () => {\n  return (\n    <div className=\"d-flex flex-column justify-content-center align-items-center\">\n      <img src={image} alt=\"not found\" style={{ width: 300 }} />\n      <p className=\"my-3\">Произошел отрицательный поиск. Потерь нет!</p>\n    </div>\n  );\n};\n","import { useState, useMemo } from 'react';\n\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Button } from '../../Button';\n\nexport const PostsSearch = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const queryParams = useMemo(() => {\n    return [...searchParams].reduce((acc, [key, value]) => {\n      acc[key] = value;\n      return acc;\n    }, {});\n  }, [searchParams]);\n\n  const [value, setValue] = useState(queryParams.search ?? '');\n  const handleChange = event => setValue(event.target.value);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    // onSubmit(value);\n    setSearchParams(prev => {\n      return { ...queryParams, search: value, page: 1 };\n    }); // -> ?search=sasd\n  };\n\n  return (\n    <form className=\"input-group mb-3\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Type to search...\"\n        value={value}\n        onChange={handleChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </form>\n  );\n};\n","export const Status = {\n  Idle: 'idle',\n  Loading: 'loading',\n  Error: 'error',\n  Success: 'success',\n};\n","import { useEffect, useState } from 'react';\n\nimport { useSearchParams } from 'react-router-dom';\n\nimport { Button } from '../../components/Button';\nimport { PostsError, PostsItem, PostsLoader, PostsNotFound, PostsSearch } from '../../components/Posts';\nimport { Status } from '../../constants/fetch-status';\nimport { getPostsService } from '../../services/posts.service';\n\nexport const PostsListPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const page = searchParams.get('page');\n  const search = searchParams.get('search') ?? '';\n\n  const [posts, setPosts] = useState(null);\n  const [status, setStatus] = useState(Status.Idle);\n\n  useEffect(() => {\n    setStatus(Status.Loading);\n    getPostsService({ search, page })\n      .then(data => {\n        setStatus(Status.Success);\n        setPosts(data);\n      })\n      .catch(() => setStatus(Status.Error));\n  }, [search, page]);\n\n  if (status === Status.Loading || status === Status.Idle) {\n    return <PostsLoader />;\n  }\n\n  if (status === Status.Error) {\n    return <PostsError />;\n  }\n\n  if (status === Status.Success && !posts) {\n    return <PostsNotFound />;\n  }\n\n  return (\n    <>\n      <PostsSearch />\n\n      <div className=\"container-fluid g-0 pb-5 mb-5\">\n        <div className=\"row\">\n          {posts.data.map(post => (\n            <PostsItem key={post.id} post={post} />\n          ))}\n        </div>\n      </div>\n\n      <div className=\"pagination\">\n        <div className=\"btn-group mx-auto py-3\">\n          {[...Array(posts.total_pages)].map((_, index) => (\n            <Button\n              key={index}\n              disabled={index + 1 === posts.page}\n              onClick={() => setSearchParams({ page: index + 1, search })} // ?page=4 ---search\n            >\n              {index + 1}\n            </Button>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n"],"names":["PostsError","className","src","image","alt","style","width","formatDistanceToNow","dirtyDate","options","requiredArgs","arguments","distanceInWords","Date","now","PostsItem","string","maxLength","post","isAuth","useAuth","location","useLocation","height","title","preview_image","objectFit","content","length","slice","views","created_at","type","to","id","state","from","Skeleton","props","classNames","styles","PostsLoader","amount","Array","map","_","i","PostsNotFound","PostsSearch","useSearchParams","searchParams","setSearchParams","queryParams","useMemo","reduce","acc","key","value","useState","search","setValue","onSubmit","event","preventDefault","prev","page","placeholder","onChange","target","Button","Status","PostsListPage","get","posts","setPosts","status","setStatus","useEffect","getPostsService","then","data","catch","total_pages","index","disabled","onClick"],"sourceRoot":""}